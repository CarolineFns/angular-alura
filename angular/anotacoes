npm install -g @angular/cli
ng new alurapic
ng --version
cd alurapic
ng serve --open

-------------
ERROR in node_modules/rxjs
npm install rxjs@6.0.0 --save
-------------

- Angular utiliza a linguagem typescript
- localhost:4200
- tudo é um componente em angular, que guarda: 
comportamento, o CSS, e a marcação HTML, a estrutura, em um único local
- @Component, Decorator que torna a classe um componente
- metainformação
- selector: 'app-root' ---   <app-root></app-root>
- selector nos permite utilizar o componente em templates em sua forma declarativa, 
então, todo o conteúdo de app.component.ts, sua apresentação, o que ele faz, 
seu CSS, são acessados por meio dele.
- Angular utiliza um webpack, um module bundle, isto é, um empacotador de módulos famoso, 
utilizado por Create React App, Vue CLI, e outros frameworks Single Page Application.  
Mas nenhum momento estas configurações do webpack são exibidas, 
pois elas ficam encapsuladas pelo Angular CLI.

- {{ title }} -> Angular expression (AE) e dentro expressão
- Data binding, ou "associação de dados"
- One way data binding ("data binding unidirecional")
- Quando formos realizar Data binding com atributos HTML do nosso component, 
usaremos os colchetes. E quando formos exibir um valor em uma tag, ou isoladamente, 
usaremos uma Angular Expression.
- Utilizamos {{ }} dentro de tags e [ ] para atributos
- menubar.component.ts -> MenubarComponent
- https://angular.io/

- npm install bootstrap@4.1.1
- angular.json
"styles": [
    "src/styles.css",
    "./node_modules/bootstrap/dist/css/bootstrap.min.css"
],
"scripts": []
- <img class="img-thumbnail" [src]="url" [alt]="title">

- um componente obrigatoriamente precisa fazer parte de um módulo.
- O módulo, é uma forma de organizarmos a nossa aplicação
- app.module.ts é o primeiro módulo a ser carregado
- <ap-photo url="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2d/Lioness_Etosha_NP.jpg/500px-Lioness_Etosha_NP.jpg" description="Leoa"></ap-photo>
- @Input() -> receber um parâmetro externo, passando um valor por meio da forma declarativa do componente
- Inbound properties, ou seja, aceitam receber um valor por meio de sua forma declarativa.

- feature module
- @NgModule
@NgModule({
    declarations: [ PhotoComponent ],
    exports: [ PhotoComponent ]
})
<ap-photo
    *ngFor="let photo of photos"
    [url]="photo.url"
    [description]="photo.description"
>
</ap-photo>

- npm install
- npm start
- Web API - servidor que tem a responsabilidade de 
fornecer os dados para a aplicação Angular em uma Single Page Application
- import { HttpClientModule } from '@angular/common/http';

- ao criarmos um serviço, usamos @Injectable(),
indica que a classe é injetável, ou seja, pode receber HttpClient e outros.

- http
    .get<Object[]>('http://localhost:3000/flavio/photos')
    .subscribe(photos => this.photos = photos);
- @Injectable({ providedIn: 'root' }) -> configuracao pra indicar um escopo raiz
- "Rename Symbol"

- constructor(private photoService: PhotoService){}
- ngOnInit(): void {}
- export class AppComponent implements OnInit 

- configuracao pra import de aspas simples
"javascript.preferences.quoteStyle":"single",
"typescript.preferences.quoteStyle": "single"

- ng generate component photos/photo-list

- CommonModule é uma boa prática importar em todos os modules pois
importa as diretrizas do angular como *ngFor e outras, disponíveis.
- O CommonModule possui todas as diretivas básicas como NgIf, NgFor, NgForOf etc
- O BrowserModule só deve ser importado no modulo principal da aplicação.
- O BrowserModule possui funcionalidades essenciais para rodar e iniciar a aplicação.

- RouterModule
- AppRoutingModule
- import { AppRoutingModule } from './app.routing.module';
const routes: Routes = [
    { path: 'user/flavio', component: PhotoListComponent },
    { path: 'p/add', component: PhotoFormComponent }
];

@NgModule({
    imports: [
        RouterModule.forRoot(routes)
    ],
    exports: [ RouterModule ]
})

 Sendo nossa aplicação localhost:4200, tudo o que for 4200/ 
 terá relação com a rota raiz. Então, o resultado de forRoot() 
 será importado, e levará em consideração esta lista de rotas (RouterModule).

 - ng generate module errors
 - ng generate component errors/not-found
 - { path: '**', component: NotFoundComponent }
 -     { path: 'user/:userName', component: PhotoListComponent },
 - const userName = this.activatedRoute.snapshot.params.userName;
 - private activatedRoute: ActivatedRoute

<ol class="list-unstyled row">
    <li *ngFor="let cols of rows" class="row">
        <div *ngFor="let photo of cols" class="col-4">
            <ap-photo
                [url]="photo.url"
                [description]="photo.description">
            </ap-photo>
        </div>
    </li>
</ol>

groupColumns(photos: Photo[]){
    const newRows = [];
      for(let index = 0; index < photos.length; index+=3){
        newRows.push( photos.slice(index, index + 3));
      }
      return newRows;
  }

- OnChanges
- ngOnChanges
- Um objeto do tipo SimpleChanges possui uma propriedade de 
mesmo nome da inbound property que sofreu mudança.
- O método ngOnChanges, quando chamado pelo próprio framework, 
recebe como parâmetro uma instância de SimpleChanges
- if(changes.photos)

<div class="text-center mt-3 mb-3">
    <form>
        <input
            class="rounded"
            type="search"
            placeholder="search..."
            autofocus
            (keyup)="filter = $event.target.value"
            >
    </form>
</div>
{{ filter }}
<ap-photos [photos]="photos"></ap-photos>

- mt-3 margin top 
- mb-3 margin bottom

- Event binding -> ()

unidirecional
[] -> data binding -> componente para o template
() -> event binding -> view para o componente

- Pipes -> podem gerar transformações nos dados, e podemos criar os nossos. 
- {{ nome | uppercase }}
- <ap-photos [photos]="photos | filterByDescription: filter"></ap-photos>
export class FilterByDescrition implements PipeTransform{
    transform(photos: Photo[], descriptionQuery: string){
        descriptionQuery = descriptionQuery
            .trim()
            .toLowerCase();

        if(descriptionQuery)
            return photos.filter(
                photo => photo.description
                    .toLowerCase()
                    .includes(descriptionQuery));
        else
            return photos;
    }
}
<p class="text-center text-muted" *ngIf="!photos.length">

- PhotoListResolver
- é necessário configurar o Resolver na rota correspondente da aplicação.
- this.photos = this.activatedRoute.snapshot.data['photos'];
- const routes: Routes = [
    { 
        path: 'user/:userName', 
        component: PhotoListComponent,
        resolve: {
            photos: PhotoListResolver
        }
     },
];

- resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Photo[]>  {
        return this.service.listFromUser(route.params.userName);}

- export class PhotoListResolver implements Resolve<Observable<Photo[]>>{

- Subject -> pode-ser emitir um valor e escutá-lo
- debounce: Subject<string> = new Subject<string>();
- import { debounceTime } from 'rxjs/operators';
- this.debounce.pipe(debounceTime(300)).subscribe(filter => this.filter = filter);
- this.debounce.unsubscribe();
- (keyup)="debounce.next($event.target.value)"
- Lettable operators

listFromUserPaginated(userName: string, page: number) {
        const params = new HttpParams()
            .append('page', page.toString());
        return this.http
            .get<Photo[]>(API + '/' + userName + '/photos', { params });
    }

- ng g c photos/photo-list/load-button
- *ngIf="hasMore; else messageTemplate"
- <ng-template #messageTemplate>

- npm install font-awesome@4.7.0
- "./node_modules/font-awesome/css/font-awesome.css"
- <i aria-hidden="true" class="fa fa-search mr-1"></i>
- class="row no-gutters" -> para tirar os espaços

Precisamos indicar, no elemento pai, o local no qual os elementos filhos 
serão adicionados e fazemos isso através de ng-content.

<ap-search 
    (onTyping)="filter = $event" 
    [value]="filter">
</ap-search>
- @Output() onTyping = new EventEmitter<string>(); 
- O nome da output property é o mesmo nome do evento utilizado por 
aqueles que desejam interagir com o componente.
- São propriedades decoradas com o decorator Output.
- Não basta aplicar um decorator específico, é necessário que a propriedade 
seja uma instância de EventEmitter.

-  diretiva, Custom Directive
- Todo componente é uma diretiva. 
A diferença é que @Component, por exemplo, 
está atrelado a um template, o que não ocorre com a diretiva.

- <h1 style="background: red" apDarkenOnHover>Photos</h1>
- diretiva pode receber parâmetros, assim como componentes.
- this.render.setStyle(this.el.nativeElement, 'filter', `brightness(${this.brightness})`);
- Todo componente é uma diretiva que possui template. 
No entanto, uma diretiva em seu estado bruto não possui templates.
- Podemos usar uma diretiva como atributo envolvendo o 
valor do seu seletor entre colchetes.
- Podemos injetar no constructor da diretiva uma referência para o elemento 
no qual ela foi associada. Angular nos dá acesso ao elemento 
através do wrapper ElementRef. (para manipulação do DOM)

---------------------------- PARTE 2 ------------------------
- Model Driven Forms -> regra de validação ficará no componente
- import { ReactiveFormsModule } from '@angular/forms';
- FormGroup -> controlar o formulário da tela
- quem controlará o formulário é a validação do 
login associado à diretiva formGroup
- FormBuilder
- this.loginForm = this.formBuilder.group({
            userName: [],
            password: []
        });
- formControlName="password"
- serName de signin.component.html
 precisa coincidir com o loginForm de signin.component.ts
- *ngIf="loginForm.get('password').errors?.required"
- [disabled]="loginForm.invalid"

- ng g s core/auth
- O serviço já se encontra com o @Injectable e providedIn: 'root', 
o que quer dizer que teremos uma única instância para a aplicação inteira
login() {
        const userName = this.loginForm.get('userName').value;
        const password = this.loginForm.get('password').value;

        this.authService
            .authenticate(userName, password)
            .subscribe(
                () => console.log('autenticado'),
                err => {
                    console.log(err);
                    this.loginForm.reset();
                    alert('Invalid user name or password');
                }
            );
        }

         authenticate(userName: string, password: string) {
    return this.http.post(API_URL + '/user/login', { userName, password } )
  }

-this.router.navigateByUrl('user/' + userName)
- this.router.navigate(['user', userName])

- @ViewChild('userNameInput') userNameInput: ElementRef<HTMLInputElement>;
- #userNameInput
- this.userNameInput.nativeElement.focus();

- constructor(@Inject(PLATFORM_ID) private platformId: string){}
- import { isPlatformBrowser } from '@angular/common';
- this.platformDetectorService.isPlatformBrowser() &&
- this.userNameInput.nativeElement.focus();

- import { tap } from 'rxjs/operators'
 authenticate(userName: string, password: string) {
    return this.http
    .post(
        API_URL + '/user/login',
        { userName, password },
        { observe: 'response' }
    )
    .pipe(tap(res => {
        const authToken = res.headers.get('x-access-token');
console.log(`User ${userName} authenticated with token ${authToken}`)
    }))
  }

- window.localStorage.setItem(KEY, authToken)
- window.localStorage.getItem(KEY);
- JWT Decoder — JSON Web Token
- JWT (J*son *Web Token)
- Um dos algoritmos de criptografia usado em sua assinatura é o HMAC SHA256 (HS256)
- O token pode ser decodificado
É utilizada uma frase secreta para gerar e criptografar o token. 
Então é possível descriptografá-lo, mas para criptografá-lo 
novamente e ele ser um token válido, é necessário saber a frase secreta.

- descriptografar o token
- npm install jwt-decode@2.2.0
-  getUser(){
        return this.userSubject.asObservable();
    }
    const user = jwt_decode(token) as User;
        this.userSubject.next(user);

    private userSubject = new BehaviorSubject<User>(null);
- guarda o ultimo valor pra quem fazer o subscrive, não se perde igual o subscribe
- O BehaviorSubject armazena a última emissão até que alguém apareça para consumi-la.
- *ngIf="(user$ | async) as user; else login"
Se tivéssemos um Subject ou BehaviorSubject nesta situação, o Angular automaticamente 
executaria a sua destruição
Com o Async pipe conseguimos capturar a emissão do Observable 
diretamente do nosso template.

- this.router.navigate(['']);
- this.userSubject.next(null);

- Route Guards
canActivate(
        route: ActivatedRouteSnapshot,
        state: RouterStateSnapshot): 
        boolean | Observable<boolean> | Promise<boolean> {
    
            if(this.userService.isLogged()){
                this.router.navigate(['user', this.userService.getUserName()])
                return false;
            }
            return true;
    }
implements CanActivate


    <a [routerLink]="['']">Please, login!</a>

- Model Driven Forms -> signupForm de tipo FormGroup
- Validators.pattern(/^[a-z0-9_\-]+$/) -> Pra começar com letra minuscula e não pode começar com numero
- AbstractControl -> sempre se usa em validador
-  if(control.value.trim() && !/^[a-z0-9_\-]+$/.test(control.value)) {}

- validação assíncrona -> foi vai acessar o backend
- [disabled]="signupForm.invalid || signupForm.pending"
- Sempre que usar a validação assincrona precisa usar o pending pra ver se 
o formulário já fez tudo que precisava fazer
- 
 return (control: AbstractControl) => {
            return control
                .valueChanges
                .pipe(debounceTime(300))
                .pipe(switchMap(userName =>
                    this.signUpService.checkUserNameTaken(userName)
                ))
                .pipe(map(isTaken => isTaken ? { userNameTaken: true } : null))
                .pipe(first());
        }

- adicionando user -> return this.http.post(API_URL + '/user/signup', newUser);
- const newUser = this.signupForm.getRawValue() as NewUser; -> Traz todos os campos do form

- Router outlet -> permite que uma rota exiba o resultado de outra rota também, rotas filhas

- private cdRef: ChangeDetectorRef
this.cdRef.detectChanges();

-ng build --prod
HTML5 mode
# -> hash não dispara o carregamento na mudança do location, no back end
RouterModule.forRoot(routes, { useHash: true } )

 separação de código do nosso sistema -> Code splitting.
 Lazy loading, em tradução livre, "carregamento preguiçoso".

{
    path: '',
    pathMatch: 'full',
    redirectTo: 'home'
},
RouterModule.forChild(routes)
loadChildren: () => import('src/app/home/home.module').then(m => m.HomeModule) 

Em uma Single Page Application, é comum lidarmos com isso:
 na primeira etapa, efetua-se o login, recebe-se o token, 
 que é guardado no browser e enviado para todas as requisições posteriores. 

 interceptadores do Http Client
 HttpInterceptor
 return next.handle(req);
providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: RequestInterceptor,
            multi: true
        }
    ]
 O multi: true serve para quando houver mais de um interceptador,
  para que seja delegado sucessivamente.

 <input formControlName="file" type="file" accept="image/*" (change)="file = $event.target.files[0]">

 const formData = new FormData(); usa formData pra fazer o post por causa do file, então nesse caso não usa o json

@Input() set url(url: string) {} -> input ja implementando o set

(click)="fileInput.click()" #fileInput

<a [routerLink]="['p', photo.id]">
 <a [routerLink]="['/p', photo.id]"> -> voltar pro inicio da aplicação pra não concatenar o caminho

import { switchMap, tap } from 'rxjs/operators';
this.comments$ = this.photoService
.addComment(this.photoId, comment)
.pipe(switchMap(() => this.photoService.getComments(this.photoId)))
.pipe(tap(() => {
    this.commentForm.reset();
}));
O operador switchMap cancela o Observable anterior passando o 
fluxo para um novo Observable, 
garantindo assim que a emissão tenha apenas o valor
 emitido pelo Observable retornado por switchMap.

this.activatedRoute.params.subscribe(params => {
this.userName = params.userName;
this.photos = this.activatedRoute.snapshot.data['photos'];
});

modificador only
export class Alert {
    constructor(
        public readonly alertType: AlertType, 
        public readonly message: string
    ) {}
}
